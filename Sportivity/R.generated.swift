//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 1 color palettes.
  struct color {
    /// This `R.color.sportivity` struct is generated, and contains static references to 6 colors.
    struct sportivity {
      /// <span style='background-color: #4ECF80; color: #B1307F; padding: 1px 3px;'>#4ECF80</span> Medium Aquamarine
      static let mediumAquamarine = Rswift.ColorResource(name: "Medium Aquamarine", red: 0.305928260087967, green: 0.809845805168152, blue: 0.500793099403381, alpha: 1.0)
      /// <span style='background-color: #9AFB6A; color: #650495; padding: 1px 3px;'>#9AFB6A</span> Pale Green
      static let paleGreen = Rswift.ColorResource(name: "Pale Green", red: 0.605655491352081, green: 0.984724521636963, blue: 0.415598392486572, alpha: 1.0)
      /// <span style='background-color: #EA4740; color: #15B8BF; padding: 1px 3px;'>#EA4740</span> Sunset Orange
      static let sunsetOrange = Rswift.ColorResource(name: "Sunset Orange", red: 0.916931688785553, green: 0.278926968574524, blue: 0.249936923384666, alpha: 1.0)
      /// <span style='background-color: #FD876F; color: #027890; padding: 1px 3px;'>#FD876F</span> Vivid Tangerine
      static let vividTangerine = Rswift.ColorResource(name: "Vivid Tangerine", red: 0.99068546295166, green: 0.528151214122772, blue: 0.435749471187592, alpha: 1.0)
      /// <span style='background-color: #FED363; color: #012C9C; padding: 1px 3px;'>#FED363</span> Mellow Yellow
      static let mellowYellow = Rswift.ColorResource(name: "Mellow Yellow", red: 0.996453762054443, green: 0.829086780548096, blue: 0.389834761619568, alpha: 1.0)
      /// <span style='background-color: #FEE19A; color: #011E65; padding: 1px 3px;'>#FEE19A</span> Pastel Yellow
      static let pastelYellow = Rswift.ColorResource(name: "Pastel Yellow", red: 0.99752002954483, green: 0.882349610328674, blue: 0.603341221809387, alpha: 1.0)
      
      /// <span style='background-color: #4ECF80; color: #B1307F; padding: 1px 3px;'>#4ECF80</span> Medium Aquamarine
      /// 
      /// UIColor(red: 0.305928260087967, green: 0.809845805168152, blue: 0.500793099403381, alpha: 1.0)
      static func mediumAquamarine(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.305928260087967, green: 0.809845805168152, blue: 0.500793099403381, alpha: 1.0)
      }
      
      /// <span style='background-color: #9AFB6A; color: #650495; padding: 1px 3px;'>#9AFB6A</span> Pale Green
      /// 
      /// UIColor(red: 0.605655491352081, green: 0.984724521636963, blue: 0.415598392486572, alpha: 1.0)
      static func paleGreen(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.605655491352081, green: 0.984724521636963, blue: 0.415598392486572, alpha: 1.0)
      }
      
      /// <span style='background-color: #EA4740; color: #15B8BF; padding: 1px 3px;'>#EA4740</span> Sunset Orange
      /// 
      /// UIColor(red: 0.916931688785553, green: 0.278926968574524, blue: 0.249936923384666, alpha: 1.0)
      static func sunsetOrange(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.916931688785553, green: 0.278926968574524, blue: 0.249936923384666, alpha: 1.0)
      }
      
      /// <span style='background-color: #FD876F; color: #027890; padding: 1px 3px;'>#FD876F</span> Vivid Tangerine
      /// 
      /// UIColor(red: 0.99068546295166, green: 0.528151214122772, blue: 0.435749471187592, alpha: 1.0)
      static func vividTangerine(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.99068546295166, green: 0.528151214122772, blue: 0.435749471187592, alpha: 1.0)
      }
      
      /// <span style='background-color: #FED363; color: #012C9C; padding: 1px 3px;'>#FED363</span> Mellow Yellow
      /// 
      /// UIColor(red: 0.996453762054443, green: 0.829086780548096, blue: 0.389834761619568, alpha: 1.0)
      static func mellowYellow(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.996453762054443, green: 0.829086780548096, blue: 0.389834761619568, alpha: 1.0)
      }
      
      /// <span style='background-color: #FEE19A; color: #011E65; padding: 1px 3px;'>#FEE19A</span> Pastel Yellow
      /// 
      /// UIColor(red: 0.99752002954483, green: 0.882349610328674, blue: 0.603341221809387, alpha: 1.0)
      static func pastelYellow(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.99752002954483, green: 0.882349610328674, blue: 0.603341221809387, alpha: 1.0)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Sportivity.clr`.
    static let sportivityClr = Rswift.FileResource(bundle: R.hostingBundle, name: "Sportivity", pathExtension: "clr")
    
    /// `bundle.url(forResource: "Sportivity", withExtension: "clr")`
    static func sportivityClr(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sportivityClr
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 18 images.
  struct image {
    /// Image `basketballIcon`.
    static let basketballIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "basketballIcon")
    /// Image `boxingIcon`.
    static let boxingIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "boxingIcon")
    /// Image `create`.
    static let create = Rswift.ImageResource(bundle: R.hostingBundle, name: "create")
    /// Image `fitnessIcon`.
    static let fitnessIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "fitnessIcon")
    /// Image `footballIcon`.
    static let footballIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "footballIcon")
    /// Image `football`.
    static let football = Rswift.ImageResource(bundle: R.hostingBundle, name: "football")
    /// Image `games`.
    static let games = Rswift.ImageResource(bundle: R.hostingBundle, name: "games")
    /// Image `logo2`.
    static let logo2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo2")
    /// Image `mapCompassSelected`.
    static let mapCompassSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "mapCompassSelected")
    /// Image `mapCompass`.
    static let mapCompass = Rswift.ImageResource(bundle: R.hostingBundle, name: "mapCompass")
    /// Image `map`.
    static let map = Rswift.ImageResource(bundle: R.hostingBundle, name: "map")
    /// Image `myProfileSelected`.
    static let myProfileSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "myProfileSelected")
    /// Image `myProfile`.
    static let myProfile = Rswift.ImageResource(bundle: R.hostingBundle, name: "myProfile")
    /// Image `pingPongIcon`.
    static let pingPongIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "pingPongIcon")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `tennisIcon`.
    static let tennisIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "tennisIcon")
    /// Image `userPlaceholder`.
    static let userPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "userPlaceholder")
    /// Image `volleyballIcon`.
    static let volleyballIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "volleyballIcon")
    
    /// `UIImage(named: "basketballIcon", bundle: ..., traitCollection: ...)`
    static func basketballIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.basketballIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "boxingIcon", bundle: ..., traitCollection: ...)`
    static func boxingIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.boxingIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "create", bundle: ..., traitCollection: ...)`
    static func create(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.create, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fitnessIcon", bundle: ..., traitCollection: ...)`
    static func fitnessIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fitnessIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "football", bundle: ..., traitCollection: ...)`
    static func football(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.football, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "footballIcon", bundle: ..., traitCollection: ...)`
    static func footballIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.footballIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "games", bundle: ..., traitCollection: ...)`
    static func games(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.games, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo2", bundle: ..., traitCollection: ...)`
    static func logo2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "map", bundle: ..., traitCollection: ...)`
    static func map(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.map, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mapCompass", bundle: ..., traitCollection: ...)`
    static func mapCompass(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapCompass, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mapCompassSelected", bundle: ..., traitCollection: ...)`
    static func mapCompassSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapCompassSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "myProfile", bundle: ..., traitCollection: ...)`
    static func myProfile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myProfile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "myProfileSelected", bundle: ..., traitCollection: ...)`
    static func myProfileSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myProfileSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pingPongIcon", bundle: ..., traitCollection: ...)`
    static func pingPongIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pingPongIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tennisIcon", bundle: ..., traitCollection: ...)`
    static func tennisIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tennisIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "userPlaceholder", bundle: ..., traitCollection: ...)`
    static func userPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userPlaceholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "volleyballIcon", bundle: ..., traitCollection: ...)`
    static func volleyballIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.volleyballIcon, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 4 nibs.
  struct nib {
    /// Nib `CategoriesSelectionView`.
    static let categoriesSelectionView = _R.nib._CategoriesSelectionView()
    /// Nib `CategorySelectionCollectionViewCell`.
    static let categorySelectionCollectionViewCell = _R.nib._CategorySelectionCollectionViewCell()
    /// Nib `EventTableViewCell`.
    static let eventTableViewCell = _R.nib._EventTableViewCell()
    /// Nib `ListingTableViewCell`.
    static let listingTableViewCell = _R.nib._ListingTableViewCell()
    
    /// `UINib(name: "CategoriesSelectionView", in: bundle)`
    static func categoriesSelectionView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categoriesSelectionView)
    }
    
    /// `UINib(name: "CategorySelectionCollectionViewCell", in: bundle)`
    static func categorySelectionCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categorySelectionCollectionViewCell)
    }
    
    /// `UINib(name: "EventTableViewCell", in: bundle)`
    static func eventTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.eventTableViewCell)
    }
    
    /// `UINib(name: "ListingTableViewCell", in: bundle)`
    static func listingTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.listingTableViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 6 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `categorySelectionCollectionCell`.
    static let categorySelectionCollectionCell: Rswift.ReuseIdentifier<CategorySelectionCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "categorySelectionCollectionCell")
    /// Reuse identifier `eventHeaderTableCell`.
    static let eventHeaderTableCell: Rswift.ReuseIdentifier<EventProfileHeaderTableViewCell> = Rswift.ReuseIdentifier(identifier: "eventHeaderTableCell")
    /// Reuse identifier `eventTableViewCell`.
    static let eventTableViewCell: Rswift.ReuseIdentifier<EventTableViewCell> = Rswift.ReuseIdentifier(identifier: "eventTableViewCell")
    /// Reuse identifier `listingTableCell`.
    static let listingTableCell: Rswift.ReuseIdentifier<ListingTableViewCell> = Rswift.ReuseIdentifier(identifier: "listingTableCell")
    /// Reuse identifier `placeHeaderTableCell`.
    static let placeHeaderTableCell: Rswift.ReuseIdentifier<PlaceProfileHeaderTableViewCell> = Rswift.ReuseIdentifier(identifier: "placeHeaderTableCell")
    /// Reuse identifier `userHeaderTableCell`.
    static let userHeaderTableCell: Rswift.ReuseIdentifier<UserProfileHeaderTableViewCell> = Rswift.ReuseIdentifier(identifier: "userHeaderTableCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 6 storyboards.
  struct storyboard {
    /// Storyboard `Authorization`.
    static let authorization = _R.storyboard.authorization()
    /// Storyboard `Event`.
    static let event = _R.storyboard.event()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `MainTab`.
    static let mainTab = _R.storyboard.mainTab()
    /// Storyboard `Place`.
    static let place = _R.storyboard.place()
    /// Storyboard `User`.
    static let user = _R.storyboard.user()
    
    /// `UIStoryboard(name: "Authorization", bundle: ...)`
    static func authorization(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.authorization)
    }
    
    /// `UIStoryboard(name: "Event", bundle: ...)`
    static func event(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.event)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "MainTab", bundle: ...)`
    static func mainTab(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mainTab)
    }
    
    /// `UIStoryboard(name: "Place", bundle: ...)`
    static func place(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.place)
    }
    
    /// `UIStoryboard(name: "User", bundle: ...)`
    static func user(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.user)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _CategorySelectionCollectionViewCell.validate()
      try _CategoriesSelectionView.validate()
      try _EventTableViewCell.validate()
    }
    
    struct _CategoriesSelectionView: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CategorySelectionCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "categorySelectionCollectionCell"
      let name = "CategoriesSelectionView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "footballIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'footballIcon' is used in nib 'CategoriesSelectionView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _CategorySelectionCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CategorySelectionCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "categorySelectionCollectionCell"
      let name = "CategorySelectionCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CategorySelectionCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategorySelectionCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "footballIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'footballIcon' is used in nib 'CategorySelectionCollectionViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _EventTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EventTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "eventTableViewCell"
      let name = "EventTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> EventTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EventTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "football") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'football' is used in nib 'EventTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ListingTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ListingTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "listingTableCell"
      let name = "ListingTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ListingTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ListingTableViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try mainTab.validate()
      try event.validate()
      try place.validate()
      try user.validate()
      try authorization.validate()
    }
    
    struct authorization: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let loginChoice = StoryboardViewControllerResource<LoginChoiceViewController>(identifier: "loginChoice")
      let name = "Authorization"
      let signup = StoryboardViewControllerResource<SignUpViewController>(identifier: "signup")
      
      func loginChoice(_: Void = ()) -> LoginChoiceViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginChoice)
      }
      
      func signup(_: Void = ()) -> SignUpViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signup)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "basketballIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'basketballIcon' is used in storyboard 'Authorization', but couldn't be loaded.") }
        if _R.storyboard.authorization().signup() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signup' could not be loaded from storyboard 'Authorization' as 'SignUpViewController'.") }
        if _R.storyboard.authorization().loginChoice() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginChoice' could not be loaded from storyboard 'Authorization' as 'LoginChoiceViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct event: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let event = StoryboardViewControllerResource<EventProfileViewController>(identifier: "event")
      let name = "Event"
      
      func event(_: Void = ()) -> EventProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: event)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "football") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'football' is used in storyboard 'Event', but couldn't be loaded.") }
        if _R.storyboard.event().event() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'event' could not be loaded from storyboard 'Event' as 'EventProfileViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct mainTab: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let games = StoryboardViewControllerResource<EventsViewController>(identifier: "games")
      let mainTab = StoryboardViewControllerResource<MainTabBarViewController>(identifier: "mainTab")
      let map = StoryboardViewControllerResource<MapViewController>(identifier: "map")
      let name = "MainTab"
      
      func games(_: Void = ()) -> EventsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: games)
      }
      
      func mainTab(_: Void = ()) -> MainTabBarViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainTab)
      }
      
      func map(_: Void = ()) -> MapViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: map)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "mapCompassSelected") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mapCompassSelected' is used in storyboard 'MainTab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mapCompass") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mapCompass' is used in storyboard 'MainTab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "search") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'search' is used in storyboard 'MainTab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "games") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'games' is used in storyboard 'MainTab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "myProfile") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'myProfile' is used in storyboard 'MainTab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "myProfileSelected") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'myProfileSelected' is used in storyboard 'MainTab', but couldn't be loaded.") }
        if _R.storyboard.mainTab().games() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'games' could not be loaded from storyboard 'MainTab' as 'EventsViewController'.") }
        if _R.storyboard.mainTab().map() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'map' could not be loaded from storyboard 'MainTab' as 'MapViewController'.") }
        if _R.storyboard.mainTab().mainTab() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainTab' could not be loaded from storyboard 'MainTab' as 'MainTabBarViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct place: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Place"
      let place = StoryboardViewControllerResource<PlaceProfileViewController>(identifier: "place")
      
      func place(_: Void = ()) -> PlaceProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: place)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "football") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'football' is used in storyboard 'Place', but couldn't be loaded.") }
        if _R.storyboard.place().place() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'place' could not be loaded from storyboard 'Place' as 'PlaceProfileViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct user: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let editUser = StoryboardViewControllerResource<EditUserTableTableViewController>(identifier: "editUser")
      let editUserNavigation = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "editUserNavigation")
      let name = "User"
      let user = StoryboardViewControllerResource<UserProfileViewController>(identifier: "user")
      
      func editUser(_: Void = ()) -> EditUserTableTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editUser)
      }
      
      func editUserNavigation(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editUserNavigation)
      }
      
      func user(_: Void = ()) -> UserProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: user)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "userPlaceholder") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'userPlaceholder' is used in storyboard 'User', but couldn't be loaded.") }
        if _R.storyboard.user().editUserNavigation() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editUserNavigation' could not be loaded from storyboard 'User' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.user().user() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'user' could not be loaded from storyboard 'User' as 'UserProfileViewController'.") }
        if _R.storyboard.user().editUser() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editUser' could not be loaded from storyboard 'User' as 'EditUserTableTableViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}